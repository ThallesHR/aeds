Arvores --
Para a criação da arvore tem como base a struct cujo vai dar a base do node
inicial e com isso expandindo para direita e esquerda(segue código abaixo):
----------------
typedef struct Node{// arvore
int data;//campo que vou guardar
struct Node*left;//ponteiro apontando para esquerda
struct Node*right//ponteiro apontando para direita
}
Node;
-----------------
Node*insert(Node*raiz,int data){//Recebe o ponteiro da raiz e o valor a inserir
Node*temp = (Node*) malloc(sizeof(Node));//instancia de node temporaria
temp->data = data;//o valor do campo data sendo recebido pelo temp
temp->left = NULL;//inicializar
temp->right = NUll;//inicializar
if(raiz== NULL){//se root for vazio
raiz = temp //root recebe o valor da temp
}
else{
Node*atual = root;//aponta pro node do root
Node*pai = NULL;//ponteiro pai
while(1){
pai = atual;// variavel pai recebe o proximo numero
if(data<pai->data){//se o numero atual for menor que o pai
atual = atual->left;//aponta pra esquerda do node atual
if(atual == NULL){
pai->left = temp;//ponteiro a esquerda do pai aponta pro temp
return raiz;// sai do loop
}
}
else{
atual = atual->right;//aponta pra direita do node atual
if(atual == NULL){//se for nulo 
pai->right = temp;//ponteiro a direita do pai aponta pro temp
return raiz; //sair do loop
}
}
}
}
return raiz;//retorna o valor ja inserido
}
------------------
void inorder(struct Node* raiz){
if(raiz){//se node nao for nulo
inorder(raiz->left);//chama ela mesma a esquerda
prinft("%d\n",raiz->data);//vai printar o ultimo 0
inorder(raiz->right);//chama ela mesma a direita
------------------
Node*search(Node *raiz, int data)  função que recebe ponteiro da raiz e o valor
Node*atual = raiz;// cria se uma variavel "atual" apontando novamente pra raiz
printf("Visitando elementos:");
while (atual){//cria se um loop que quebra  caso o node atual seja nulo
printf("%d",atual->data);//imprime o numero que esta no atual
if(data <atual ->data){//data é menor que atual ent atual recebe data
atual = atual->left;//atual desce e procura a esquerda
} else if (data> atual->data){// atual é maior que data faz atual ser data
atual = atual ->right;// atual desce e procura a direita
}
else {return atual;}
------------------------------------
int main(){
int i;
int array[x] =
{x numeros};
Node*raiz = NULL;//!!esta definido somente Node pois foi criado como typedef struct
ou seja criado como novo tipo,node é a mesma coisa que struct node

for(i = 0; i<x  ; i++){//um loop para inserir todos numeros
raiz = insert(raiz,array[i]);//uma função chamada insert com os parametros
1-endereço da raiz que começa nulo e ela devolve o endereço da raiz quando popular
2-array na posição da lista
printf("inserido:%d\n",array[i]);
printf("inorder:\n");
inorder(root);
return 0;
}

int temp = search(root,88)//função de busca cujo recebe os parametros de endereço da raiz
e numero cujo eu busco 


-------------------------------------------------------------------------------------------
Busca binaria iterativa

#include<stdio.h>
int busca_binaria(int v[],int n,int elemento);//inicia função
int busca_binaria(int v[],int n,int elemento){// função com parametros vetor,numero de elementos,elemento desejado
	int inicio = 0;//inicio da busca vetor 0
	int fim = n-1;//fim da busca ultimo elemento -1
	int meio;// meio do vetor
	
	while(inicio <= fim){ // enquanto fim for maior ou igual inicio
		meio = (inicio+fim)/2;// meio recebe inicio + fim /2 para achar o meio do vetor
		if(elemento == v[meio]){ // se o elemento for  == ao vetor na posição do meio
		
		printf("Elemento encontrado na posicao %d\n",meio);//elemento encontrado e em que posição ele esta do vetor
		return elemento;//retorna elemento
		}else if(elemento < v[meio])//se não elemento for menor que meio 
		fim = meio -1;// fim recebe -1,levando a busca a estar mais perto do inicio
		else //se não
		inicio = meio+1;// inicio recebe +1,levando a busca a estar mais perto do fim
	}
	printf("Elemento nao encontrado\n");//caso elemento não seja encontrado sai do loop e printa
	return -1;//retorno de erro
}

int main(){
	int v[8] = {1,4,6,10,12,20,27,50};//vetor
	printf("%d\n",busca_binaria(v,8,4));//print com a função e os parametros vetor,numero de elementos,elemento desejado
}


---------------------------------------------------------------------------------------------------------
arvore heap 

min heap = mais proximo da raiz os nos tem valores menores
max heap = mais proximo da raiz os nos tem valores maiores

#include<stdio.h>
#define MAX_SIZE 5

int pai(int index){// variavel pai
	return (index-1)/2;//calculo da variavel pai para swap
}

int filho_esquerdo(int index){//variavel filho
	return 2* index +1;//calculo da variavel filho para swap
}
int filho_direito(int index){//variavel filho
	return 2* index+2;//calculo da variavel filho para swap
}

void swap(int * x,int * y){//swap
	int temp  =* x;//variavel temporaria recebendo x
	* x = * y;// x recebe y
	* y = temp;// y recebe x
}
void insert(int vet[],int data,int *n){// insercao com os parametros, vetor, numero a ser inserido,cauda do vetor/arvore
	if(*n >=MAX_SIZE){//se cauda for maior que o limite permitido
		printf("Limite excedido!!");//limite excedido!!
			return -1;
	}
	vet[*n] = data;//vetor na posiçao da cauda recebe o numero
	* n = *n+1;// cauda cria mais uma posição antes do fim
	
	int i = *n-1;//começa da posição nova
	while(i!= 0 && vet[pai(i)]<vet[i]){//enquanto a posição for diferente de 0 e diferente da raiz e nmaior que a raiz
		swap(&vet[pai(i)],&vet[i]);//faz o swap
		i = pai(i);//posição recebe pai na posiçao atual
	}
}

void max_heapify(int vet[],int index, int n){//função para ver estrututra do heap com parametroos de vetor,index e numero
	int esq = filho_esquerdo(index);//filho a esquerda do no atual
	int dir = filho_direito(index);//filho a direita do no atual
	
	int largest = index;//maior valor recebe valor atual
	
	if(esq<= n && vet[esq] > vet[largest]){//se esq existir verifica se ele e maior que o maior valor
		largest = esq;//maior recebe esq
		
	}
	if(dir <= n &&vet[dir] > vet[largest]){//se esq existir verifica se ele e maior que o maior valor
		largest = dir;//maior recebe dir
	}
	if( largest != index){//se o maior for diferente do atual
		int temp = vet[index];// variavel temporaria recebe o vetor na posicao atual
		vet[index] = vet[largest]; // vetor na posiçao atual recebe vetor na posicao maior
		max_heapify(vet,largest,n);//chama a função para atualizar a arvore
	}
}

int extract_max(int vet[],int*n){//funçao de extração recebendo o vetor e a cauda
	int max_item =vet[0];//max item ou item que vai ser removido
	vet[0] = vet[*n -1];// remove ele e diminui o vetor
	*n = *n-1;// cauda diminui
	
	max_heapify(vet,0,*n);//chama a função para atualizar a arvore
	return max_item;//retorna item removido
}

void print(int vet[],int n){//printa a arvore
	int i;
	for(i = 0; i< n; i++){
		printf("Posicao %d: %d\n",i,vet[i]);//printa a inserção
	}
}
int main(){
	int n = 0;// cauda a 0
	int vet[MAX_SIZE];//vetor definido com o max size
	
	insert(vet,2,&n);//inserir
	insert(vet,3,&n);
	insert(vet,5,&n);
	insert(vet,1,&n);
	insert(vet,15,&n);
	
	print(vet,n);//printa o vetor inserido
	extract_max(vet,&n);
	print(vet,n);
}


