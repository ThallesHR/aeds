BUBBLE SORT
Um dos mais antigos e conhecidos metodos de ordenação é o bubble sort, onde consiste em Percorrer
toda lista e comparar pares de elementos assim ordenando eles por comparação.
com isso se nota a criação de uma função responsável por trocar elementos
e a utilização de dois loops, 1 é responsavel por verificar onde a ordenação está dentro do array e o outro é responsavel por
fazer as comparações dentro do array, assim realizando a troca caso necessário e para finalizar uma função responsavel por printar o array.

///
#include<stdio.h>
#include <stdbool.h>

void swap(int* xp, int* yp){
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void bubbleSort(int arr[], int n){
    int i, j;
    bool swapped;
    for (i = 0; i < n - 1; i++) {
        swapped = false;
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(&arr[j], &arr[j + 1]);
                swapped = true;
            }
        }

        // Se não houve a troca de elementos
        if (!swapped)
            break;
    }
}

void printArray(int arr[], int n){
    int i;
    for(i = 0; i < n; i++){
        printf("%4d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[] = { 66, 30, 27, 13, 25, 10 };
    int n = sizeof(arr) / sizeof(arr[0]);
    
    printf("Original array (size %d): \n", n);
    printArray(arr, n);

    bubbleSort(arr, n);

    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}
///

MERGE SORT 
Consiste em um meio de ordenação onde ele pega 1vetor separa eles e vai subdvidindo a lista para ordenar
assim ordenando internamente e depois juntando toda a lista para ordenar 1 a 1 
nota se que nesse código utilizamos a função merge para unir dois pedaços de array assim tendo 2 minivetores unidos
e na função mergesort utilizamos dela para separar e fazer as ordenações necessárias.
///
#include<stdio.h>
#include<stdbool.h>

void merge(int arr[],int l, int m, int r){
	int dimL = m-l+1;
	int dimR = r - m;
	int L[dimR],R[dimR];
	
	int i,j,k;
	for(i = 0; i<dimL; i++){
		L[i] = arr[l+i];
		
	}
	for(j = 0; j <dimR; j++){
		R[j] = arr[m+1+j];
	}
	i = 0; j = 0, k = l;
	while(i< dimL && j <dimR){
		if(L[i] <= R[j]){
			arr[k] = L[i];
			i++;
		}
		else{
			arr[k] = R[j];
			j++;
		}
		k++;
	}
	while(i<dimL){
		arr[k] =L[i];
		i++;
		k++;
	}
	while(j<dimR){
		arr[k] = R[j];
		j++;
		k++;
	}
}

void Mergesort(int arr[], int l,int r){
	if(l<r){
		int m = l+(r-l)/2;
		
		Mergesort(arr,l,m);
		Mergesort(arr,m+1,r);
		merge(arr,l,m,r);
		}
	}
	
void printa(int arr[], int n){
	int i;
	for(i = 0;i<n;i++){
		printf("%4d",arr[i]);
	}
	printf("\n");
}


int main(){
	int arr[] = {10,22,89,76,1,44};
	int n = sizeof(arr)/sizeof(arr[0]);
	
	printf("Array original(size%d):\n",n);
	printa(arr,n);
	
	Mergesort(arr,0,n-1);
	
	printf("Novo array: \n");
	printa(arr,n);
	return 0;
}
///

HEAPSORT
Segue abaixo o código de heapsort que se carateriza por ser uma ordenação que primeiramente transforma-se em uma arvore 
heap atendendo os requisitos dela(nó pai maior ou igual filhos) é criada uma função (heapify) para primeiramente transforma
r-mos ela em uma arvore binaria assim conseguindo utilizar o metodo heap logo em seguida utilizamos a heapsort para puxar
o metodo que consiste em começar do ultimo no pai e percorrer de tras pra frente
com isso ele remove o maior elemento do heap e ordena no array do maior pro menor fazendo a ordenação e comparando todos


///
#include <stdio.h>

void heapify(int arr[], int n,int i){
	int maior = i;
	
int esq = 2*i+1;
int dir = 2*i+2;

if(esq<n && arr[esq]>arr[maior]){
	maior = esq;
}

if(dir<n && arr[dir]>arr[maior]){
	maior = dir;
}

if(maior != i){
	int temp = arr[i];
	arr[i] = arr[maior];
	arr[maior] = temp;
	
	heapify(arr,n,maior);
	}
}


void heapsort(int arr[],int n){
	for(int i = n/2 - 1; i>= 0; i--){
		heapify(arr,n,i);
	}
	
		for(int i = n-1; i>= 0; i--){
		int temp =  arr[0];
		arr[0] = arr[i];
		arr[i] = temp;
		heapify(arr,i,0);
	}
	
}

void printa(int arr[], int n){
	int i;
	for (i = 0; i < n; i++){
		printf("%4d",arr[i]);
	}
}

int main(){
	int arr [] = {9,1,14,28,67,55,7};
	int n = sizeof(arr)/sizeof(arr[0]);
	
	printf("Original array (size %d):",n);
	printa(arr,n);
	
	heapsort(arr,n);
	
	printf("Novo array");
	printa(arr,n);
	return 0;
}
///
